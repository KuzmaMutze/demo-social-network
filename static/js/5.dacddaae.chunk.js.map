{"version":3,"sources":["components/Content/Profile/Profile.module.css","components/Content/Content.module.css","components/Content/MyPosts/MyPosts.module.css","components/Content/MyPosts/Post/Post.module.css","components/Content/MyPosts/Post/Post.tsx","components/Content/MyPosts/MyPosts.tsx","components/Content/MyPosts/MyPostsContainer.tsx","components/Content/Profile/ProfileStatusWithHooks.tsx","components/Content/Profile/ProfileDataForm.tsx","components/Content/Profile/Profile.tsx","components/Content/Content.tsx","components/Content/ContentContainer.tsx"],"names":["module","exports","Post","props","className","classes","item","size","icon","UserOutlined","writing","message","like","href","HeartTwoTone","twoToneColor","maxLenghtCreacter15","maxLenghtCreacter","ReduxFormAddPost","reduxForm","form","onSubmit","handleSubmit","createField","required","TextAreaField","type","htmlType","MyPosts","postElements","postData","reverse","map","post","id","wrapper","newPost","values","addPost","addedPostElement","titleNewPost","MyPostsContainer","connect","state","contentPage","newPostText","actions","addPostActionCreater","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","disableMode","updateStatusProfile","onChange","e","currentTarget","value","onBlur","onClick","autoFocus","statusUpload","ProfileDataReduxForm","profile","isOwner","error","input","TextField","style","marginBottom","fontSize","Object","keys","contacts","key","CheckboxField","btn_contact","ProfileData","goToEditMode","profileDataItems","fullName","aboutMe","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","Contact","Content","Preloader","items","info","src","photos","large","userPhoto","avatar","alt","action","savePhoto","listType","maxCount","marginLeft","UploadOutlined","saveProfileInfo","then","initialValues","Profile","ContentContainer","userId","this","match","params","authUserId","history","push","getUserProfile","getStatusProfile","console","refreshProfile","prevProps","prevState","content","React","Component","compose","withRouter","auth","isAuth"],"mappings":"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","file":"static/js/5.dacddaae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatar\":\"Profile_avatar__3lCtT\",\"upload\":\"Profile_upload__2aiy0\",\"statusUpload\":\"Profile_statusUpload__1z6Yd\",\"input\":\"Profile_input__3d3XV\",\"btn_contact\":\"Profile_btn_contact__1lx3Y\",\"wrapper\":\"Profile_wrapper__1ojNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"Content_items__2uNhE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"titleNewPost\":\"MyPosts_titleNewPost__1l1Fi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Post_img__ZxOsZ\",\"writing\":\"Post_writing__2i3Ms\",\"like\":\"Post_like__8m9HU\",\"item\":\"Post_item__3v7MR\"};","import classes from './Post.module.css'\r\nimport { HeartTwoTone } from '@ant-design/icons';\r\nimport React from 'react';\r\nimport { Avatar } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\n\r\ntype PropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n            <Avatar size={64} icon={<UserOutlined />} />\r\n                <span className={classes.writing}>\r\n                    {props.message}\r\n                </span>\r\n                <a className={classes.like} href=\"#\"><HeartTwoTone twoToneColor=\"#eb2f96\"/>{props.like}</a>\r\n            </div>\r\n        </div>\r\n    )  \r\n}\r\n\r\n\r\nexport default Post;","import classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\"\r\nimport { required, maxLenghtCreacter } from '../../../utils/validators/validatirs';\r\nimport {createField, GetStringKeys, Textarea} from \"../../common/FormsControls/FormsControls\"\r\nimport { PostDataType } from '../../../types/types';\r\nimport { Button, Form } from 'antd';\r\nimport {\r\n    TextAreaField,\r\n    // @ts-ignore\r\n  } from 'redux-form-antd'\r\n\r\ntype PropsType = {\r\n    postData: Array<PostDataType>\r\n    addPost: (addedPostElement: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n    \r\n    let postElements = [...props.postData].reverse().map( (post) => <Post message={post.message} key={post.id} like={post.like}/>);\r\n\r\n    let onAddPost = (values: FormAddPostValueType) => {\r\n        props.addPost(values.addedPostElement);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.newPost}>\r\n                <ReduxFormAddPost onSubmit={onAddPost}/>\r\n            </div>\r\n            <div className={classes.titleNewPost}>\r\n                <b>My posts</b>\r\n            </div> \r\n            <div>\r\n                {postElements}  \r\n            </div>\r\n        </div>\r\n    ) \r\n}\r\n\r\n// form and type\r\nconst maxLenghtCreacter15 = maxLenghtCreacter(15);\r\n\r\nexport type FormAddPostValueType = {\r\n    addedPostElement: string\r\n}\r\ntype FormAddPostOwnPropsType = {}\r\ntype FormAddPostValueKeysType = GetStringKeys<FormAddPostValueType>\r\n\r\nconst FormAddPost: React.FC<InjectedFormProps<FormAddPostValueType, FormAddPostOwnPropsType> & FormAddPostOwnPropsType> = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit}>\r\n                {createField<FormAddPostValueKeysType>(\"Write a new post\", \"addedPostElement\", [required, maxLenghtCreacter15], TextAreaField)}\r\n                <Button type=\"primary\" htmlType=\"submit\">Send</Button>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nconst ReduxFormAddPost = reduxForm<FormAddPostValueType, FormAddPostOwnPropsType>({\r\n    form: \"profileAddPostTextArea\"\r\n})(FormAddPost);\r\n\r\nexport default MyPosts;","import { connect } from 'react-redux';\r\nimport {actions} from '../../../redux/content-reducer';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { PostDataType } from '../../../types/types';\r\nimport MyPosts from './MyPosts';\r\n\r\ntype mapStatePropsType = {\r\n    postData: Array<PostDataType>\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    addPost: (values: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStatePropsType => {\r\n    return {\r\n        postData: state.contentPage.postData,\r\n        newPostText: state.contentPage.newPostText\r\n    }\r\n}\r\nlet MyPostsContainer = connect<mapStatePropsType, mapDispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n        addPost: actions.addPostActionCreater\r\n    })(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, { useEffect, useState } from \"react\";\r\nimport classes from './Profile.module.css';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    // onStatusChange: () => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n    \r\n    useEffect( () => {\r\n        setStatus(props.status)\r\n    }, [props.status]);\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const disableMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatusProfile(status);\r\n    }\r\n\r\n    const onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            {editMode ?\r\n                <div >  \r\n                    Status: <input onChange={onStatusChange} onBlur={disableMode} onClick={disableMode} value={status} autoFocus={true}></input>\r\n                </div>\r\n\r\n                : <div onClick={activateMode} ><b>Status:</b><span className={classes.statusUpload}> {props.status || \"set status\"}</span></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import { InjectedFormProps, reduxForm } from \"redux-form\"\r\nimport { maxLenghtCreacter, required } from \"../../../utils/validators/validatirs\";\r\nimport classes from './Profile.module.css';\r\nimport { ProfileType } from \"../../../types/types\";\r\nimport { Button } from 'antd';\r\nimport { createField, GetStringKeys, Input } from \"../../common/FormsControls/FormsControls\";\r\nimport {\r\n    CheckboxField,\r\n    TextField,\r\n    // @ts-ignore\r\n  } from 'redux-form-antd'\r\n\r\nlet maxLenghtCreacter15 = maxLenghtCreacter(15);\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n}\r\n// todo: creact key contacts\r\ntype ProfileDataFormValueTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, isOwner, error}) => {\r\n    return <form onSubmit={handleSubmit}>\r\n        <div className={classes.wrapper}>\r\n            {error && <div className={classes.error}>{error}</div>}\r\n            <div className={classes.input}>\r\n                <b>User Name</b>:\r\n                {createField<ProfileDataFormValueTypeKeys>(\"Full name\", \"fullName\", [], TextField)}\r\n            </div>\r\n            <div className={classes.input}>\r\n                <b>About me:</b>\r\n                {createField<ProfileDataFormValueTypeKeys>(\"About me\", \"aboutMe\", [], TextField)}\r\n            </div>\r\n                <br/>\r\n            <div className={classes.input}>\r\n                <div style={{marginBottom: \"15px\", fontSize: \"18px\"}}><b>Contacts</b>:</div> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}: {createField(key, \"contacts.\" + key, [], TextField)}</b>\r\n                    {/* todo: create some solution for embedded objects*/}\r\n                </div>\r\n                })}                \r\n            </div>\r\n                <br/>\r\n            <div className={classes.input}><b>I find work:</b>{createField<ProfileDataFormValueTypeKeys>('', \"lookingForAJob\", [], CheckboxField)}</div>\r\n            <div className={classes.input}><b>Description:</b> {createField<ProfileDataFormValueTypeKeys>(\"Description\", \"lookingForAJobDescription\", [], TextField)}</div>\r\n            {isOwner && <Button className={classes.btn_contact} htmlType=\"submit\" type=\"primary\">Save</Button>}\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, PropsType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataReduxForm;","import Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './Profile.module.css';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport userPhoto from \"../../../assets/img/1.png\";\r\nimport { ChangeEvent, useState } from 'react';\r\nimport ProfileDataReduxForm from './ProfileDataForm';\r\nimport React from \"react\";\r\nimport { ProfileType, ContactsType } from '../../../types/types';\r\nimport { Button, Upload } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport { RcFile } from 'antd/lib/upload';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n    saveProfileInfo: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\n\r\n\r\nconst Content: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: RcFile) => {\r\n        debugger\r\n        if (e){\r\n            props.savePhoto(e);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileType) => {\r\n        // todo: remove then\r\n        props.saveProfileInfo(profile).then(() => {\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* <div><img className={classes.img} src=\"https://img.freepik.com/free-photo/empty-sea-beach-background_74190-313.jpg?size=626&ext=jpg&ga=GA1.2.1135173464.1609286400\"></img></div> */}\r\n            \r\n            <div className={classes.items}>\r\n                <div className={classes.info}>\r\n                    <img src={props.profile.photos.large || userPhoto } className={classes.avatar} alt=\"avatar\"/>\r\n                    <Upload\r\n                    // @ts-ignore\r\n                    action={onMainPhotoSelected}\r\n                    listType=\"picture\"\r\n                    maxCount={1}\r\n                    >\r\n                        <Button style={{marginLeft: \"20px\"}} icon={<UploadOutlined />}>Upload</Button>\r\n                    </Upload>\r\n                    {/* {props.isOwner && <label className={classes.upload}>Upload avatar<input type=\"file\" onChange={onMainPhotoSelected}/></label>} */}\r\n                    <ProfileStatusWithHooks status={props.status} updateStatusProfile={props.updateStatusProfile}/>\r\n                </div>\r\n                <div className={classes.info}>\r\n                    \r\n                    {editMode ? <ProfileDataReduxForm onSubmit={onSubmit} initialValues={props.profile} profile={props.profile} isOwner={props.isOwner} /> \r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {setEditMode(true)}}/>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )  \r\n}\r\n\r\ntype PropsTypeForProfileData = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<PropsTypeForProfileData> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div className={classes.wrapper}>\r\n        <div className={classes.profileDataItems}>\r\n           <b>User Name:</b> {profile.fullName}\r\n        </div>\r\n        <div className={classes.profileDataItems}>\r\n            <b>About me:</b> {profile.aboutMe}\r\n        </div>\r\n        <br/>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}                \r\n        </div>\r\n        <br/>\r\n        <div>\r\n            <div className={classes.profileDataItems}><b>I find work:</b> {profile.lookingForAJob ? \"Yes\" : \"No\"}</div>\r\n            <div className={classes.profileDataItems}><b>Description:</b> {profile.lookingForAJobDescription}</div>\r\n        </div>\r\n        {isOwner && <Button type=\"primary\" onClick={goToEditMode}>Edit</Button>}\r\n    </div>\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.profileDataItems}><b>{contactTitle}</b>: {contactValue}</div>\r\n}\r\n\r\nexport default Content;","import MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport Profile from './Profile/Profile';\r\nimport classes from './Content.module.css';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype PropsType = {\r\n    saveProfileInfo: (profile: ProfileType) => Promise<any>\r\n    savePhoto: (file: File) => void\r\n    isOwner: boolean\r\n    profile: ProfileType | null,\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n}\r\n\r\nlet Content: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={classes.items}>\r\n            <Profile saveProfileInfo={props.saveProfileInfo} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatusProfile={props.updateStatusProfile}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { getUserProfile, getStatusProfile, updateStatusProfile, savePhoto, saveProfileInfo } from \"../../redux/content-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { ProfileType } from \"../../types/types\";\r\nimport Content from \"./Content\";\r\nimport classes from './Content.module.css';\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void\r\n    getStatusProfile: (userId: number) => void\r\n    updateStatusProfile: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n    saveProfileInfo: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype PathPropsType = RouteComponentProps<PathParamType> & {\r\n    someString: string\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & mapDispatchPropsType & PathPropsType\r\n\r\nclass ContentContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authUserId;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.updateStatusProfile(this.props.status);\r\n        if(!userId) {\r\n            console.error('ID should exists in URI params or in state (\"authUserId\")')\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatusProfile(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={classes.content}>\r\n                <Content {...this.props} \r\n                saveProfileInfo={this.props.saveProfileInfo}\r\n                profile={this.props.profile} \r\n                status={this.props.status} \r\n                updateStatusProfile={this.props.updateStatusProfile}\r\n                isOwner={!this.props.match.params.userId}\r\n                savePhoto={this.props.savePhoto}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({ \r\n    profile: state.contentPage.profile,\r\n    status: state.contentPage.status,\r\n    authUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserProfile, getStatusProfile, updateStatusProfile, savePhoto, saveProfileInfo})\r\n)(ContentContainer);"],"sourceRoot":""}