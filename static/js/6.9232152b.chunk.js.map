{"version":3,"sources":["pages/Chat/Chat/AddMessageForm.tsx","pages/Chat/Chat/Message.tsx","pages/Chat/Chat/Messages.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["AddMessageForm","props","useState","message","setMessage","readyStatus","setReadyStatus","useEffect","openHandler","wsChannel","addEventListener","removeEventListener","style","marginTop","marginBottom","placeholder","onChange","e","currentTarget","value","width","height","type","disabled","onClick","send","Message","refChat","useRef","current","scrollIntoView","behavior","scrollToBottom","ref","src","photo","userName","Messages","messages","setMessages","messageHandler","newMessages","JSON","parse","data","prevMessages","overflowY","map","m","index","Chat","setWsChannel","ws","closeHandler","setTimeout","creactChannel","close","WebSocket","ChatPage"],"mappings":"qNAQaA,EAAsC,SAACC,GAAW,IAAD,EAE/BC,qBAF+B,mBAEtDC,EAFsD,KAE7CC,EAF6C,OAGvBF,mBAA8B,WAHP,mBAGtDG,EAHsD,KAGzCC,EAHyC,KAK7DC,qBAAU,WAAO,IAAD,EACTC,EAAc,WACnBF,EAAe,UAGhB,OADA,UAAAL,EAAMQ,iBAAN,SAAiBC,iBAAiB,OAAQF,GACnC,WAAO,IAAD,EACZ,UAAAP,EAAMQ,iBAAN,SAAiBE,oBAAoB,OAAQH,MAE5C,CAACP,EAAMQ,YAWV,OACC,gCACC,qBAAKG,MAAO,CAACC,UAAW,OAAQC,aAAc,QAA9C,SACC,cAAC,IAAD,CAAOC,YAAY,UAAUC,SAAU,SAACC,GAAD,OAAOb,EAAWa,EAAEC,cAAcC,QAAQA,MAAOhB,EAASS,MAAO,CAACQ,MAAO,OAAQC,OAAQ,QAASC,KAAK,WAE/I,8BACC,cAAC,IAAD,CAAQC,SAA8B,OAApBtB,EAAMQ,WAAsC,UAAhBJ,EAAyBmB,QAftD,WAGZ,IAAD,EAFDrB,IAGJ,UAAAF,EAAMQ,iBAAN,SAAiBgB,KAAKtB,GACtBC,EAAW,MAUV,wB,QC3BSsB,EAA+B,SAAC,GAAiB,IAAfvB,EAAc,EAAdA,QACvCwB,EAAUC,iBAA8B,MAS9C,OAHArB,qBAAU,YAJa,WAAO,IAAD,EAC3B,UAAAoB,EAAQE,eAAR,SAAiBC,eAAe,CAAEC,SAAU,WAI5CC,KACC,IAED,sBAAKC,IAAKN,EAAV,UACE,qBAAKO,IAAK/B,EAAQgC,QADpB,IAC8B,4BAAIhC,EAAQiC,WACxC,uBACA,8BAAMjC,EAAQA,UACd,2BCpBOkC,EAAgC,SAACpC,GAAW,IAAD,EACtBC,mBAAwB,IADF,mBAC/CoC,EAD+C,KACrCC,EADqC,KAetD,OAZAhC,qBAAU,WAAO,IAAD,EACViC,EAAiB,SAACvB,GACpB,IAAIwB,EAAcC,KAAKC,MAAM1B,EAAE2B,MAC/BL,GAAY,SAACM,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAIrD,OADA,UAAAxC,EAAMQ,iBAAN,SAAiBC,iBAAiB,UAAW8B,GACtC,WAAO,IAAD,EACX,UAAAvC,EAAMQ,iBAAN,SAAiBE,oBAAoB,UAAW6B,MAEjD,CAACvC,EAAMQ,YAGR,qBAAKG,MAAO,CAAES,OAAQ,QAASyB,UAAW,QAA1C,SACGR,EAASS,KAAI,SAACC,EAAGC,GAAJ,OACZ,cAAC,EAAD,CAAqB9C,QAAS6C,GAAhBC,SCjBTC,EAA4B,SAACjD,GAAW,IAAD,EAEhBC,mBAA2B,MAFX,mBAE3CO,EAF2C,KAEhC0C,EAFgC,KA8BlD,OA1BA5C,qBAAU,WACR,IAAI6C,EACEC,EAAe,WACnBC,WAAWC,EAAe,MAG5B,SAASA,IAAiB,IAAD,IACrB,QAAF,EAAAH,SAAA,SAAIzC,oBAAoB,QAAS0C,GAC/B,QAAF,EAAAD,SAAA,SAAII,SACJJ,EAAK,IAAIK,UAAU,iEAChB/C,iBAAiB,QAAS2C,GAC7BF,EAAaC,GAKf,OAFAG,IAEO,WACLH,EAAGzC,oBAAoB,QAAS0C,GAChCD,EAAGI,WAEJ,IAEHjD,qBAAU,cAEP,CAACE,IAGF,gCACE,cAAC,EAAD,CAAUA,UAAWA,IACrB,cAAC,EAAD,CAAgBA,UAAWA,QCpCpBiD,EAA+B,SAACzD,GAC3C,OACE,8BACE,cAAC,EAAD,OAKSyD","file":"static/js/6.9232152b.chunk.js","sourcesContent":["import { Button, Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n\twsChannel: WebSocket | null\r\n}\r\nexport const AddMessageForm: React.FC<PropsType> = (props) => {\r\n\r\n\tconst [message, setMessage] = useState<string>()\r\n\tconst [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n\tuseEffect(() => {\r\n\t\tconst openHandler = () => {\r\n\t\t\tsetReadyStatus(\"ready\")\r\n\t\t} \r\n\t\tprops.wsChannel?.addEventListener('open', openHandler)\r\n\t\treturn () => {\r\n\t\t\tprops.wsChannel?.removeEventListener('open', openHandler)\r\n\t\t}\r\n\t}, [props.wsChannel])\r\n\r\n\tconst sendMessage = () => {\r\n\t\tif (!message){\r\n\t\t\treturn\r\n\t\t}else {\r\n\t\t\tprops.wsChannel?.send(message)\r\n\t\t\tsetMessage(\"\")\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div style={{marginTop: \"20px\", marginBottom: \"30px\"}}>\r\n\t\t\t\t<Input placeholder=\"Message\" onChange={(e) => setMessage(e.currentTarget.value)} value={message} style={{width: \"100%\", height: \"45px\"}} type=\"text\"/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button disabled={props.wsChannel === null || readyStatus !== \"ready\"} onClick={sendMessage}>Send</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n","import React, { useEffect, useRef } from 'react';\r\n\r\ntype PropsType = {\r\n  message: MessageType;\r\n};\r\nexport type MessageType = {\r\n  message: string;\r\n  photo: string;\r\n  userId: number;\r\n  userName: string;\r\n};\r\nexport const Message: React.FC<PropsType> = ({ message }) => {\r\n  const refChat = useRef<null | HTMLDivElement>(null);\r\n\r\n  const scrollToBottom = () => {\r\n    refChat.current?.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, []);\r\n  return (\r\n    <div ref={refChat}>\r\n      <img src={message.photo} /> <b>{message.userName}</b>\r\n      <br />\r\n      <div>{message.message}</div>\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Message, MessageType } from './Message';\r\n\r\ntype PropsType = {\r\n  wsChannel: WebSocket | null;\r\n};\r\nexport const Messages: React.FC<PropsType> = (props) => {\r\n  const [messages, setMessages] = useState<MessageType[]>([]);\r\n\r\n  useEffect(() => {\r\n    let messageHandler = (e: MessageEvent) => {\r\n      let newMessages = JSON.parse(e.data);\r\n      setMessages((prevMessages) => [...prevMessages, ...newMessages]);\r\n    };\r\n\r\n    props.wsChannel?.addEventListener('message', messageHandler);\r\n    return () => {\r\n      props.wsChannel?.removeEventListener('message', messageHandler);\r\n    };\r\n  }, [props.wsChannel]);\r\n\r\n  return (\r\n    <div style={{ height: '500px', overflowY: 'auto' }}>\r\n      {messages.map((m, index) => (\r\n        <Message key={index} message={m} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { AddMessageForm } from \"./AddMessageForm\";\r\nimport { Messages } from \"./Messages\";\r\n\r\ntype PropsType = {\r\n    \r\n}\r\nexport const Chat: React.FC<PropsType> = (props) => {\r\n\r\n  const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n  useEffect(() => {\r\n    let ws : WebSocket;\r\n    const closeHandler = () => {\r\n      setTimeout(creactChannel, 3000)\r\n    }\r\n\r\n    function creactChannel() {\r\n      ws?.removeEventListener('close', closeHandler)\r\n      ws?.close()\r\n      ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n      ws.addEventListener('close', closeHandler)\r\n      setWsChannel(ws)\r\n    }\r\n\r\n    creactChannel()\r\n\r\n    return () => {\r\n      ws.removeEventListener('close' ,closeHandler)\r\n      ws.close()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n  }, [wsChannel])\r\n\r\n  return (\r\n    <div>\r\n      <Messages wsChannel={wsChannel}/>\r\n      <AddMessageForm wsChannel={wsChannel}/>\r\n    </div>\r\n  )\r\n};\r\n\r\n","import React from \"react\"\r\nimport { Chat } from \"./Chat/Chat\";\r\n\r\ntype PropsType = {}  \r\nexport const ChatPage:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ChatPage"],"sourceRoot":""}