{"version":3,"sources":["pages/Chat/Chat/AddMessageForm.tsx","pages/Chat/Chat/Message.tsx","pages/Chat/Chat/Messages.tsx","pages/Chat/Chat/Chat.tsx","pages/Chat/ChatPage.tsx"],"names":["AddMessageForm","props","useState","message","setMessage","readyStatus","setReadyStatus","useEffect","openHandler","wsChannel","addEventListener","removeEventListener","style","marginTop","marginBottom","placeholder","onChange","e","currentTarget","value","width","height","type","disabled","onClick","send","Message","src","photo","userName","Messages","messages","setMessages","messageHandler","newMessages","JSON","parse","data","prevMessages","overflowY","map","m","index","Chat","setWsChannel","ws","closeHandler","setTimeout","creactChannel","close","WebSocket","ChatPage"],"mappings":"qNAQaA,EAAsC,SAACC,GAAW,IAAD,EAE/BC,qBAF+B,mBAEtDC,EAFsD,KAE7CC,EAF6C,OAGvBF,mBAA8B,WAHP,mBAGtDG,EAHsD,KAGzCC,EAHyC,KAK7DC,qBAAU,WAAO,IAAD,EACTC,EAAc,WACnBF,EAAe,UAGhB,OADA,UAAAL,EAAMQ,iBAAN,SAAiBC,iBAAiB,OAAQF,GACnC,WAAO,IAAD,EACZ,UAAAP,EAAMQ,iBAAN,SAAiBE,oBAAoB,OAAQH,MAE5C,CAACP,EAAMQ,YAWV,OACC,gCACC,qBAAKG,MAAO,CAACC,UAAW,OAAQC,aAAc,QAA9C,SACC,cAAC,IAAD,CAAOC,YAAY,UAAUC,SAAU,SAACC,GAAD,OAAOb,EAAWa,EAAEC,cAAcC,QAAQA,MAAOhB,EAASS,MAAO,CAACQ,MAAO,OAAQC,OAAQ,QAASC,KAAK,WAE/I,8BACC,cAAC,IAAD,CAAQC,SAA8B,OAApBtB,EAAMQ,WAAsC,UAAhBJ,EAAyBmB,QAftD,WAGZ,IAAD,EAFDrB,IAGJ,UAAAF,EAAMQ,iBAAN,SAAiBgB,KAAKtB,GACtBC,EAAW,MAUV,wB,QC3BSsB,EAA+B,SAAC,GAAe,IAAdvB,EAAa,EAAbA,QAE1C,OACA,gCACI,qBAAKwB,IAAKxB,EAAQyB,QADtB,IAC+B,4BAAIzB,EAAQ0B,WACvC,uBACA,8BAAM1B,EAAQA,UACd,2BCVK2B,EAAgC,SAAC7B,GAAW,IAAD,EAEpBC,mBAAwB,IAFJ,mBAE7C6B,EAF6C,KAEnCC,EAFmC,KAkBtD,OAdEzB,qBAAU,WAAO,IAAD,EAEV0B,EAAiB,SAAChB,GACpB,IAAIiB,EAAcC,KAAKC,MAAMnB,EAAEoB,MAC/BL,GAAY,SAACM,GAAD,4BAAsBA,GAAtB,YAAuCJ,QAKnD,OAFA,UAAAjC,EAAMQ,iBAAN,SAAiBC,iBAAiB,UAAWuB,GAEtC,WAAO,IAAD,EACX,UAAAhC,EAAMQ,iBAAN,SAAiBE,oBAAoB,UAAWsB,MAEnD,CAAChC,EAAMQ,YAGV,qBAAKG,MAAO,CAACS,OAAQ,QAASkB,UAAW,QAAzC,SACGR,EAASS,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAAC,EAAD,CAAqBvC,QAASsC,GAAhBC,SCrBnCC,EAA4B,SAAC1C,GAAW,IAAD,EAEhBC,mBAA2B,MAFX,mBAE3CO,EAF2C,KAEhCmC,EAFgC,KA8BlD,OA1BArC,qBAAU,WACR,IAAIsC,EACEC,EAAe,WACnBC,WAAWC,EAAe,MAG5B,SAASA,IAAiB,IAAD,IACrB,QAAF,EAAAH,SAAA,SAAIlC,oBAAoB,QAASmC,GAC/B,QAAF,EAAAD,SAAA,SAAII,SACJJ,EAAK,IAAIK,UAAU,iEAChBxC,iBAAiB,QAASoC,GAC7BF,EAAaC,GAKf,OAFAG,IAEO,WACLH,EAAGlC,oBAAoB,QAASmC,GAChCD,EAAGI,WAEJ,IAEH1C,qBAAU,cAEP,CAACE,IAGF,gCACE,cAAC,EAAD,CAAUA,UAAWA,IACrB,cAAC,EAAD,CAAgBA,UAAWA,QCpCpB0C,EAA+B,SAAClD,GAC3C,OACE,8BACE,cAAC,EAAD,OAKSkD","file":"static/js/6.53ff370d.chunk.js","sourcesContent":["import { Button, Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\"\r\n\r\n\r\n\r\ntype PropsType = {\r\n\twsChannel: WebSocket | null\r\n}\r\nexport const AddMessageForm: React.FC<PropsType> = (props) => {\r\n\r\n\tconst [message, setMessage] = useState<string>()\r\n\tconst [readyStatus, setReadyStatus] = useState<'pending' | 'ready'>('pending')\r\n\r\n\tuseEffect(() => {\r\n\t\tconst openHandler = () => {\r\n\t\t\tsetReadyStatus(\"ready\")\r\n\t\t} \r\n\t\tprops.wsChannel?.addEventListener('open', openHandler)\r\n\t\treturn () => {\r\n\t\t\tprops.wsChannel?.removeEventListener('open', openHandler)\r\n\t\t}\r\n\t}, [props.wsChannel])\r\n\r\n\tconst sendMessage = () => {\r\n\t\tif (!message){\r\n\t\t\treturn\r\n\t\t}else {\r\n\t\t\tprops.wsChannel?.send(message)\r\n\t\t\tsetMessage(\"\")\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div style={{marginTop: \"20px\", marginBottom: \"30px\"}}>\r\n\t\t\t\t<Input placeholder=\"Message\" onChange={(e) => setMessage(e.currentTarget.value)} value={message} style={{width: \"100%\", height: \"45px\"}} type=\"text\"/>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<Button disabled={props.wsChannel === null || readyStatus !== \"ready\"} onClick={sendMessage}>Send</Button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\n","import React from \"react\"\r\n\r\ntype PropsType = {\r\n    message: MessageType\r\n}\r\nexport type MessageType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport const Message: React.FC<PropsType> = ({message}) => {\r\n\r\n    return (\r\n    <div>\r\n        <img src={message.photo}/> <b>{message.userName}</b> \r\n        <br/>\r\n        <div>{message.message}</div>\r\n        <hr></hr>\r\n    </div>\r\n  )\r\n};\r\n\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { Message, MessageType } from \"./Message\";\r\n\r\n\r\n\r\ntype PropsType = {\r\n  wsChannel: WebSocket | null\r\n}\r\nexport const Messages: React.FC<PropsType> = (props) => {\r\n\r\n    const [messages, setMessages] = useState<MessageType[]>([])\r\n\r\n    useEffect(() => {\r\n\r\n      let messageHandler = (e: MessageEvent) => {\r\n        let newMessages = JSON.parse(e.data)\r\n        setMessages((prevMessages) => [...prevMessages, ...newMessages])\r\n      }\r\n\r\n        props.wsChannel?.addEventListener('message', messageHandler)\r\n\r\n        return () => {\r\n          props.wsChannel?.removeEventListener('message', messageHandler)\r\n        }\r\n    }, [props.wsChannel])\r\n\r\n  return (\r\n    <div style={{height: \"500px\", overflowY: \"auto\"}}>\r\n      {messages.map((m, index) => <Message key={index} message={m}/>)}\r\n    </div>\r\n  )\r\n};\r\n\r\n","import React, { useEffect, useState } from \"react\"\r\nimport { AddMessageForm } from \"./AddMessageForm\";\r\nimport { Messages } from \"./Messages\";\r\n\r\ntype PropsType = {\r\n    \r\n}\r\nexport const Chat: React.FC<PropsType> = (props) => {\r\n\r\n  const [wsChannel, setWsChannel] = useState<WebSocket | null>(null)\r\n\r\n  useEffect(() => {\r\n    let ws : WebSocket;\r\n    const closeHandler = () => {\r\n      setTimeout(creactChannel, 3000)\r\n    }\r\n\r\n    function creactChannel() {\r\n      ws?.removeEventListener('close', closeHandler)\r\n      ws?.close()\r\n      ws = new WebSocket(\"wss://social-network.samuraijs.com/handlers/ChatHandler.ashx\")\r\n      ws.addEventListener('close', closeHandler)\r\n      setWsChannel(ws)\r\n    }\r\n\r\n    creactChannel()\r\n\r\n    return () => {\r\n      ws.removeEventListener('close' ,closeHandler)\r\n      ws.close()\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n\r\n  }, [wsChannel])\r\n\r\n  return (\r\n    <div>\r\n      <Messages wsChannel={wsChannel}/>\r\n      <AddMessageForm wsChannel={wsChannel}/>\r\n    </div>\r\n  )\r\n};\r\n\r\n","import React from \"react\"\r\nimport { Chat } from \"./Chat/Chat\";\r\n\r\ntype PropsType = {}  \r\nexport const ChatPage:React.FC<PropsType> = (props) => {\r\n  return (\r\n    <div>\r\n      <Chat />\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ChatPage"],"sourceRoot":""}